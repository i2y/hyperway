// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: greeter.proto

package genconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	gen "grpc-real-comparison/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GreeterServiceName is the fully-qualified name of the GreeterService service.
	GreeterServiceName = "grpcweb.example.v1.GreeterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GreeterServiceGreetProcedure is the fully-qualified name of the GreeterService's Greet RPC.
	GreeterServiceGreetProcedure = "/grpcweb.example.v1.GreeterService/Greet"
	// GreeterServiceCalculateProcedure is the fully-qualified name of the GreeterService's Calculate
	// RPC.
	GreeterServiceCalculateProcedure = "/grpcweb.example.v1.GreeterService/Calculate"
	// GreeterServiceStreamNumbersProcedure is the fully-qualified name of the GreeterService's
	// StreamNumbers RPC.
	GreeterServiceStreamNumbersProcedure = "/grpcweb.example.v1.GreeterService/StreamNumbers"
)

// GreeterServiceClient is a client for the grpcweb.example.v1.GreeterService service.
type GreeterServiceClient interface {
	Greet(context.Context, *connect.Request[gen.GreetRequest]) (*connect.Response[gen.GreetResponse], error)
	Calculate(context.Context, *connect.Request[gen.CalculateRequest]) (*connect.Response[gen.CalculateResponse], error)
	StreamNumbers(context.Context, *connect.Request[gen.StreamRequest]) (*connect.ServerStreamForClient[gen.NumberResponse], error)
}

// NewGreeterServiceClient constructs a client for the grpcweb.example.v1.GreeterService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGreeterServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GreeterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	greeterServiceMethods := gen.File_greeter_proto.Services().ByName("GreeterService").Methods()
	return &greeterServiceClient{
		greet: connect.NewClient[gen.GreetRequest, gen.GreetResponse](
			httpClient,
			baseURL+GreeterServiceGreetProcedure,
			connect.WithSchema(greeterServiceMethods.ByName("Greet")),
			connect.WithClientOptions(opts...),
		),
		calculate: connect.NewClient[gen.CalculateRequest, gen.CalculateResponse](
			httpClient,
			baseURL+GreeterServiceCalculateProcedure,
			connect.WithSchema(greeterServiceMethods.ByName("Calculate")),
			connect.WithClientOptions(opts...),
		),
		streamNumbers: connect.NewClient[gen.StreamRequest, gen.NumberResponse](
			httpClient,
			baseURL+GreeterServiceStreamNumbersProcedure,
			connect.WithSchema(greeterServiceMethods.ByName("StreamNumbers")),
			connect.WithClientOptions(opts...),
		),
	}
}

// greeterServiceClient implements GreeterServiceClient.
type greeterServiceClient struct {
	greet         *connect.Client[gen.GreetRequest, gen.GreetResponse]
	calculate     *connect.Client[gen.CalculateRequest, gen.CalculateResponse]
	streamNumbers *connect.Client[gen.StreamRequest, gen.NumberResponse]
}

// Greet calls grpcweb.example.v1.GreeterService.Greet.
func (c *greeterServiceClient) Greet(ctx context.Context, req *connect.Request[gen.GreetRequest]) (*connect.Response[gen.GreetResponse], error) {
	return c.greet.CallUnary(ctx, req)
}

// Calculate calls grpcweb.example.v1.GreeterService.Calculate.
func (c *greeterServiceClient) Calculate(ctx context.Context, req *connect.Request[gen.CalculateRequest]) (*connect.Response[gen.CalculateResponse], error) {
	return c.calculate.CallUnary(ctx, req)
}

// StreamNumbers calls grpcweb.example.v1.GreeterService.StreamNumbers.
func (c *greeterServiceClient) StreamNumbers(ctx context.Context, req *connect.Request[gen.StreamRequest]) (*connect.ServerStreamForClient[gen.NumberResponse], error) {
	return c.streamNumbers.CallServerStream(ctx, req)
}

// GreeterServiceHandler is an implementation of the grpcweb.example.v1.GreeterService service.
type GreeterServiceHandler interface {
	Greet(context.Context, *connect.Request[gen.GreetRequest]) (*connect.Response[gen.GreetResponse], error)
	Calculate(context.Context, *connect.Request[gen.CalculateRequest]) (*connect.Response[gen.CalculateResponse], error)
	StreamNumbers(context.Context, *connect.Request[gen.StreamRequest], *connect.ServerStream[gen.NumberResponse]) error
}

// NewGreeterServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGreeterServiceHandler(svc GreeterServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	greeterServiceMethods := gen.File_greeter_proto.Services().ByName("GreeterService").Methods()
	greeterServiceGreetHandler := connect.NewUnaryHandler(
		GreeterServiceGreetProcedure,
		svc.Greet,
		connect.WithSchema(greeterServiceMethods.ByName("Greet")),
		connect.WithHandlerOptions(opts...),
	)
	greeterServiceCalculateHandler := connect.NewUnaryHandler(
		GreeterServiceCalculateProcedure,
		svc.Calculate,
		connect.WithSchema(greeterServiceMethods.ByName("Calculate")),
		connect.WithHandlerOptions(opts...),
	)
	greeterServiceStreamNumbersHandler := connect.NewServerStreamHandler(
		GreeterServiceStreamNumbersProcedure,
		svc.StreamNumbers,
		connect.WithSchema(greeterServiceMethods.ByName("StreamNumbers")),
		connect.WithHandlerOptions(opts...),
	)
	return "/grpcweb.example.v1.GreeterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GreeterServiceGreetProcedure:
			greeterServiceGreetHandler.ServeHTTP(w, r)
		case GreeterServiceCalculateProcedure:
			greeterServiceCalculateHandler.ServeHTTP(w, r)
		case GreeterServiceStreamNumbersProcedure:
			greeterServiceStreamNumbersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGreeterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGreeterServiceHandler struct{}

func (UnimplementedGreeterServiceHandler) Greet(context.Context, *connect.Request[gen.GreetRequest]) (*connect.Response[gen.GreetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("grpcweb.example.v1.GreeterService.Greet is not implemented"))
}

func (UnimplementedGreeterServiceHandler) Calculate(context.Context, *connect.Request[gen.CalculateRequest]) (*connect.Response[gen.CalculateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("grpcweb.example.v1.GreeterService.Calculate is not implemented"))
}

func (UnimplementedGreeterServiceHandler) StreamNumbers(context.Context, *connect.Request[gen.StreamRequest], *connect.ServerStream[gen.NumberResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("grpcweb.example.v1.GreeterService.StreamNumbers is not implemented"))
}
